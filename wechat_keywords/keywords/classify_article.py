import json
import re
from json import JSONDecodeError
from typing import Callable
from api.base import LLMApi, same

_CLASSIFY_PROMPT_TEMPLATE = """{
  "instruction": {
    "description": "根据提供的文章内容，判断它是否属于与健康、医疗、医药、营养或运动相关的科普文章。",
    "task_details": [
      "如果是非科普类文章（例如新闻报道、官方公告等），则返回 {'tag': 'none'}。",
      "若为科普类文章，请依据文章的主要主题选择最合适的标签。标签应当紧密关联于文章的核心议题。",
      "如果没有找到合适的标签，同样返回 {'tag': 'none'}。"
    ],
    "input_specification": {
      "article_content": "{article}",
      "tags_reference": "{tags}"
    },
    "output_requirements": {
      "format": "输出必须是一个有效的JSON对象，包含键值对 'tag'。",
      "value_of_tag": "该字段应填写最匹配的文章标签或 'none'（当找不到合适标签或文章不属于科普类别时）。",
      "example": {
        "tag": "心血管内科"
      }
    },
    "special_instructions": [
      "确保最终输出严格遵循指定的JSON格式。",
      "对于跨领域的文章，请优先考虑最核心的主题来决定标签。",
      "遇到不确定情况时，默认返回 {'tag': 'none'}。"
    ]
  }
}"""

_TAGS = """[
    {"名称": "心血管内科", "描述": "涉及心脏及血管疾病的诊断与治疗，如冠心病、高血压、心律失常等。"},
    {"名称": "呼吸与危重症医学科", "描述": "涵盖呼吸系统疾病（如哮喘、慢阻肺、肺炎）及危重症患者的救治与支持治疗。"},
    {"名称": "消化内科", "描述": "胃、肠、肝、胆、胰等消化系统疾病的诊疗，如胃溃疡、肝炎、胆石症等。"},
    {"名称": "肾脏内科", "描述": "急慢性肾炎、肾功能不全等肾脏疾病的药物治疗与透析管理。"},
    {"名称": "内分泌与代谢科", "描述": "糖尿病、甲状腺疾病及代谢紊乱的药物治疗与生活方式干预。"},
    {"名称": "血液科", "描述": "贫血、白血病、淋巴瘤等血液系统疾病的化疗、靶向及支持治疗。"},
    {"名称": "风湿免疫科", "描述": "风湿性关节炎、系统性红斑狼疮等自身免疫性疾病的药物与理疗干预。"},
    {"名称": "神经内科", "描述": "中风、帕金森病、癫痫等神经系统疾病的药物治疗与康复训练。"},
    {"名称": "感染病科", "描述": "细菌、病毒、真菌等感染性疾病的抗感染治疗与疑难病例管理。"},
    {"名称": "老年医学科", "描述": "老年慢性病、多病共存的综合评估与慢病管理。"},
    {"名称": "普外科", "描述": "胃肠道、甲状腺、疝气等外科疾病的传统与微创手术治疗。"},
    {"名称": "肝胆外科", "描述": "肝癌、胆结石、胰腺炎等肝胆胰疾病的外科治疗。"},
    {"名称": "胃肠外科", "描述": "胃、肠道肿瘤及炎症性疾病的手术治疗。"},
    {"名称": "乳腺外科", "描述": "乳腺增生、乳腺癌等乳腺疾病的手术与综合治疗。"},
    {"名称": "心脏大血管外科", "描述": "冠脉旁路移植、心脏瓣膜置换等复杂心脏手术。"},
    {"名称": "神经外科", "描述": "脑肿瘤、颅脑损伤及脊髓疾病的手术治疗。"},
    {"名称": "骨科", "描述": "骨折、关节炎、骨骼损伤的外科修复与功能重建。"},
    {"名称": "妇科", "描述": "月经失调、子宫肌瘤等女性生殖系统疾病的诊疗。"},
    {"名称": "产科", "描述": "孕期管理、分娩过程及产后护理。"},
    {"名称": "生殖医学科", "描述": "辅助生殖技术（试管婴儿、人工授精）与不孕不育治疗。"},
    {"名称": "儿科", "描述": "儿童呼吸、消化、感染等内科疾病的诊疗与健康管理。"},
    {"名称": "新生儿科", "描述": "新生儿黄疸、早产儿监护及急救管理。"},
    {"名称": "肿瘤内科", "描述": "化疗、靶向治疗等肿瘤药物治疗方案。"},
    {"名称": "放疗科", "描述": "高能放射线治疗肿瘤的技术与应用。"},
    {"名称": "眼科", "描述": "白内障、青光眼等眼部疾病的药物、激光及手术治疗。"},
    {"名称": "耳鼻喉科", "描述": "耳、鼻、喉感染、炎症及结构异常的诊疗。"},
    {"名称": "口腔科", "描述": "牙齿、牙龈及颌面疾病的口腔修复与外科手术。"},
    {"名称": "皮肤性病科", "描述": "湿疹、银屑病、痤疮等皮肤病与性传播疾病的诊疗。"},
    {"名称": "精神心理科", "描述": "抑郁症、焦虑症等精神障碍的心理咨询与药物干预。"},
    {"名称": "康复医学科", "描述": "术后康复、运动障碍的物理治疗与功能恢复。"},
    {"名称": "急诊医学科", "描述": "急性疾病与创伤的快速诊断与紧急救治。"},
    {"名称": "中医科", "描述": "中药、针灸、推拿等传统中医疗法的疾病预防与调理。"},
    {"名称": "营养科", "描述": "患者营养评估、饮食调控与疾病康复支持。"},
    {"名称": "公共卫生与预防医学", "描述": "疾病预防、健康促进及流行病学研究的综合管理。"}
]"""

def classify_by_llm(content: str, api: LLMApi, handle_response: Callable[[str], str] = same) -> str:
    """
    使用 LLM API 对文章内容进行分类，并返回分类标签。
    
    参数:
        content (str): 需要分类的文章内容。
        api (LLMApi): 用于生成分类结果的 LLM API 实例。
        handle_response (Callable[[str], str]): 可选的响应处理函数，默认不做任何处理。
    
    返回:
        str: 文章的分类标签。如果失败，则返回空字符串。
    """
    # 使用 json.dumps() 将 _TAGS 转换为一个合法的 JSON 字符串（确保没有换行符和多余的空格）
    tags_str = json.dumps(json.loads(_TAGS), ensure_ascii=False)

    # 使用 json.dumps 对 content 进行转义
    escaped_content = json.dumps(content)
    
    # 组装 prompt
    prompt = _CLASSIFY_PROMPT_TEMPLATE.replace('{tags}', tags_str).replace('{article}', escaped_content)
    
    # 获取 API 响应
    response = api.generate(prompt, handle_response)
    
    try:
        # 尝试将响应解析为 JSON 格式
        result = json.loads(re.sub(r'```json\n|\n```', '', response).strip())
        
        # 检查响应中是否包含 'tag' 字段
        if 'tag' in result:
            return result['tag']
        else:
            print("Response does not contain 'tag' field.")
            return ''
    
    except json.JSONDecodeError as e:
        # JSON 解码错误时的处理
        print(f"JSON decode error: {e}")
        return ''
    except TypeError as e:
        # 当传入的数据类型不正确时的处理
        print(f"TypeError decoding JSON string: {e}")
        return ''
    except Exception as e:
        # 捕获所有其他未预见的异常
        print(f"Unexpected error: {e}")
        return ''